---
- name: 下载master组件
  copy:
    src: "{{ item }}"
    dest: /usr/local/bin/
    mode: 0755
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
    - kubectl

- name: 分发kubernetes证书签名请求
  template:
    src: kubernetes-csr.json.j2
    dest: /etc/kubernetes/ssl/kubernetes-csr.json
    mode: 0644

- name: 生成kubernetes证书和私钥
  shell: "cd /etc/kubernetes/ssl && cfssl gencert -ca=/etc/kubernetes/ssl/ca.pem \
          -ca-key=/etc/kubernetes/ssl/ca-key.pem \
          -config=/etc/kubernetes/ssl/ca-config.json \
          -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes"

- name: 分发admin证书和私钥
  copy:
    src: "{{ item }}"
    dest: /etc/kubernetes/ssl/
    mode: 0644
  with_items:
    - admin-key.pem
    - admin.pem

- name: 创建kube-apiserver使用的token文件
  template:
    src: token.csv.j2
    dest: /etc/kubernetes/token.csv
    mode: 0644

- name: 创建kube-apiserver的systemd unit文件
  template:
    src: kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service
    mode: 0755

- name: 创建kube-contronller-manager systemd unit 文件
  template:
    src: kube-controller-manager.service.j2
    dest: /etc/systemd/system/kube-controller-manager.service
    mode: 0755

- name: 创建kube-scheduler systemd unit文件
  template:
    src: kube-scheduler.service.j2
    dest: /etc/systemd/system/kube-scheduler.service
    mode: 0755

- name: daemon-reload
  shell: "systemctl daemon-reload"

- name: 启动kube-apiserver
  service:
    name: kube-apiserver
    state: restarted
    enabled: yes

- name: 启动kube-controller-manager
  service:
    name: kube-controller-manager
    state: restarted
    enabled: yes

- name: 启动kube-scheduler
  service:
    name: kube-scheduler
    state: restarted
    enabled: yes

- name: 创建kubectl kubeconfig文件
  shell: "kubectl config set-cluster kubernetes \
          --certificate-authority=/etc/kubernetes/ssl/ca.pem \
          --embed-certs=true \
          --server=https://192.168.199.232:6443"

- name: 设置客户端认证参数
  shell: "kubectl config set-credentials admin \
          --client-certificate=/etc/kubernetes/ssl/admin.pem \
          --embed-certs=true \
          --client-key=/etc/kubernetes/ssl/admin-key.pem"

- name: 设置上下文参数
  shell: "kubectl config set-context kubernetes \
          --cluster=kubernetes \
          --user=admin"

- name: 设置默认上下文
  shell: "kubectl config use-context kubernetes"

- name: 授予kubelet-bootstrap用户角色
  shell: "kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --user=kubelet-bootstrap"
  ignore_errors: yes
#创建kubelet bootstrapping kubeconfig文件

- name: 设置集群参数
  shell: "kubectl config set-cluster kubernetes \
          --certificate-authority=/etc/kubernetes/ssl/ca.pem \
          --embed-certs=true \
          --server=https://192.168.199.232:6443 \
          --kubeconfig=bootstrap.kubeconfig"

- name: 设置客户端认证参数
  shell: "kubectl config set-credentials kubelet-bootstrap \
          --token=71c47926f6fe7d08233365b127a1dabc \
          --kubeconfig=bootstrap.kubeconfig"

- name: 设置上下文参数
  shell: "kubectl config set-context default \
          --cluster=kubernetes \
          --user=kubelet-bootstrap \
          --kubeconfig=bootstrap.kubeconfig"

- name: 设置默认上下文
  shell: "kubectl config use-context default --kubeconfig=bootstrap.kubeconfig"

- name: 分发kube-proxy私钥
  copy:
    src: "{{ item }}"
    dest: /etc/kubernetes/ssl/
    mode: 0644
  with_items:
    - kube-proxy.pem
    - kube-proxy-key.pem
#创建kube-proxy kubeconfig 文件

- name: 设置集群参数
  shell: "kubectl config set-cluster kubernetes \
          --certificate-authority=/etc/kubernetes/ssl/ca.pem \
          --embed-certs=true \
          --server=https://192.168.199.232:6443
          --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig"

- name: 设置客户端认证参数
  shell: "kubectl config set-credentials kube-proxy \
          --client-certificate=/etc/kubernetes/ssl/kube-proxy.pem \
          --client-key=/etc/kubernetes/ssl/kube-proxy-key.pem \
          --embed-certs=true \
          --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig"

- name: 设置上下文参数
  shell: "kubectl config set-context default \
          --cluster=kubernetes \
          --user=kube-proxy \
          --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig"

- name: 设置默认上下文
  shell: "kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig"
  ignore_errors: yes
